using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

/// <summary>
/// this chunk of code is just to show how things could be done in the old
/// days - when Entity Framework - (or something like it make in house to 
/// make things easier for regular devs) 
/// there's ways to make the connect string secure etc
/// and I just used the structure that the EF framework had autogenerated
/// - but would have had to been defined otherwise... 
/// </summary>
namespace KristiLakeTrailPOI_api.data
{
    public class OldFashionedSQLquery 
    {
        const string superCriticalConnectString = "data source=localhost;initial catalog=KristiDemo;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework";

        public static List<PointOfInterest> RetrieveList()
        {
            List<PointOfInterest> rezult = new List<PointOfInterest>();
            String sql = "Select * From PointOfInterest";
            try
            {
                using (SqlConnection conn = new SqlConnection(superCriticalConnectString))
                {
                    conn.Open();
                    using (SqlCommand command = new SqlCommand(sql, conn))
                    {
                        using (IDataReader myReader = command.ExecuteReader())
                        {
                            while (myReader.Read())
                            {
                                rezult.Add(Reader2POI(myReader));                                
                            }
                        }
                    }
                }
            }
            catch (SqlException sex)
            {
                throw new Exception(sex.Message);
            }
            return rezult;
        }

        // if I was feeling perky I'd make this part of the PointOfInterest class
        // as a constructor
        private static PointOfInterest Reader2POI(IDataReader myReader)
        {
            PointOfInterest rezult = new PointOfInterest();
            try
            {
                // hardtyping them isn't a best practice... 
                rezult.ID = (int)myReader["ID"];
                rezult.PointID = (int)myReader["PointID"];
                rezult.PointTitle = (string)myReader["PointTitle"];
                rezult.PointInterest = (string)myReader["PointInterest"];
            }
            catch (Exception ex)
            {
                // if it fails - should bjork up the line..
                throw ex;
            }
            return rezult;
        }

        public static PointOfInterest RetrieveByPOIid(int givenID)
        {
            // if I wasn't using EF elsewhere I'd have had to define that class...
            PointOfInterest rezult = null;
            String sql = "Select * From PointOfInterest Where [PointID] = @givenID";
            try
            {
                using (SqlConnection conn = new SqlConnection(superCriticalConnectString))
                {
                    conn.Open();
                    using (SqlCommand command = new SqlCommand(sql, conn))
                    {
                        command.Parameters.Add(new SqlParameter("givenID", (SqlDbType)DbType.Int32, givenID ));
                        using (IDataReader myReader = command.ExecuteReader())
                        {
                            while (myReader.Read())
                            {
                                // we want it to fail if the hard typing bjorks...                                 
                                rezult = Reader2POI(myReader);
                                //rezult.ID = (int)myReader["ID"];
                                //rezult.PointID = (int)myReader["PointID"];
                                break; // we only want the first record
                            }
                        }
                    }
                }
            }
            catch (SqlException sex)
            {
                throw new Exception(sex.Message);                
            }
            return rezult; // if no record found - that's not an error and will return null
        }

        //public virtual DbSet<PointOfInterest> PointOfInterests { get; set; }
        //public virtual 

    }
}